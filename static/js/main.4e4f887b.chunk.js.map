{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["require","Highcharts","setOptions","chart","backgroundColor","linearGradient","stops","borderWidth","plotBackgroundColor","plotShadow","plotBorderWidth","options","type","renderTo","title","text","subtitle","yAxis","max","tooltip","crosshairs","headerFormat","pointFormat","footerFormat","shared","useHTML","xAxis","categories","titel","legend","layout","align","verticalAlign","plotOptions","line","dataLabels","enabled","enableMouseTracking","cursor","point","events","click","alert","this","series","name","y","category","column","pointPadding","pie","allowPointSelect","format","showInLegends","data","credits","responsive","rules","condition","maxWidth","chartOptions","App","props","makeChart","changeChart","event","document","getElementById","value","target","console","log","onSelectionChanged","selectedDataStringPresentation","gridApi","getSelectedNodes","map","node","athlete","country","join","state","columnDefs","headerName","field","checkboxSelection","sortable","filter","editable","fetch","then","result","json","rowData","setState","onChange","bind","id","style","width","margin","className","height","rowSelection","onGridReady","params","api","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4e4f887b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport Highcharts from \"highcharts\";\r\nimport 'ag-grid-enterprise';\r\nimport './App.css';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine-dark.css';\r\nrequire('highcharts/modules/exporting')(Highcharts);\r\nrequire('highcharts/modules/export-data')(Highcharts);\r\n\r\n\r\n\r\nHighcharts.setOptions({\r\n  chart: {\r\n    backgroundColor: {\r\n        linearGradient: [0, 0, 500, 500],\r\n        stops: [\r\n            [0, 'rgb(255, 255, 255)'],\r\n            [1, 'rgb(240, 240, 255)']\r\n        ]\r\n    },\r\n    borderWidth: 2,\r\n    plotBackgroundColor: 'rgba(255, 255, 255, .9)',\r\n    plotShadow: true,\r\n    plotBorderWidth: 1\r\n  }\r\n})\r\nvar options = {\r\n  chart: {\r\n    type: 'line',\r\n    renderTo: 'chartContainer'\r\n  },\r\n  title: {\r\n    text: 'Result Of Semester-1(Batch-2020)'\r\n  },\r\n\r\n  subtitle: {\r\n      text: 'Information Technology'\r\n  },\r\n\r\n  yAxis: {\r\n      max: 100,\r\n      title: {\r\n          text: 'Marks out of 100'\r\n      },\r\n  },\r\n  tooltip: {\r\n    backgroundColor: '#DCCCC9',\r\n    crosshairs: true,\r\n    headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\r\n    pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\r\n        '<td style=\"padding:0\"><b>{point.y}</b></td></tr>',\r\n    footerFormat: '</table>',\r\n    shared: true,\r\n    useHTML: true\r\n  },\r\n  xAxis: {\r\n    categories: ['C++', 'PHP', 'Python', 'Java', 'C'],\r\n    titel: 'Student names'\r\n  },\r\n\r\n  legend: {\r\n      layout: 'horizontal',\r\n      align: 'center',\r\n      verticalAlign: 'bottom'\r\n  },\r\n  plotOptions: {\r\n    line: {\r\n      dataLabels: {\r\n          enabled: true\r\n      },\r\n      enableMouseTracking: true,\r\n      cursor: 'pointer',\r\n      point: {\r\n        events: {\r\n            click: function () {\r\n                alert('ID No ' + this.series.name + ' gets ' + this.y + ' Marks in ' + this.category);\r\n            }\r\n        }\r\n      }\r\n    },\r\n    column: {\r\n      pointPadding: 0.2,\r\n      borderWidth: 0\r\n    },\r\n    pie: {\r\n      allowPointSelect: true,\r\n      cursor: 'pointer',\r\n      dataLabels: {\r\n          enabled: true,\r\n          format: '<b>{point.x}</b>: {point.y} '\r\n      },\r\n      showInLegends: true\r\n    }\r\n  },\r\n  series: [\r\n    {\r\n        name: 'IT111',\r\n        data: [92, 76, 78, 98, 88]\r\n    }, \r\n    {\r\n        name: 'IT112',\r\n        data: [92, 56, 68, 78, 78]\r\n    }, \r\n    {\r\n        name: 'IT113',\r\n        data: [51, 53, 72, 64, 68]\r\n    }, \r\n    {\r\n        name: 'IT114',\r\n        data: [71, 67, 69, 48, 68]\r\n    }, \r\n    {\r\n        name: 'IT115',\r\n        data: [62, 96, 88, 68, 78]\r\n    }\r\n  ],\r\n  credits: false,\r\n  responsive: {\r\n    rules: [{\r\n        condition: {\r\n            maxWidth: 500\r\n        },\r\n        chartOptions: {\r\n            legend: {\r\n                layout: 'horizontal',\r\n                align: 'center',\r\n                verticalAlign: 'bottom'\r\n            }\r\n        }\r\n    }]\r\n  }\r\n};\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      columnDefs: [\r\n        { headerName: \"Athlete\", field: \"athlete\", checkboxSelection: true, sortable: true, filter: true, editable: true },\r\n        { headerName: \"Age\", field: \"age\", sortable: false, filter: true, editable: true },\r\n        { headerName: \"Country\", field: \"country\", sortable: true, filter: true, editable: true },\r\n        { headerName: \"Year\", field: \"year\", sortable: true, filter: true, editable: true },\r\n        { headerName: \"Date\", field: \"date\", sortable: true, filter: true, editable: true },\r\n        { headerName: \"Sport\", field: \"sport\", sortable: true, filter: true, editable: true },\r\n        { headerName: \"Gold\", field: \"gold\", sortable: true, filter: true, editable: true },\r\n        { headerName: \"Silver\", field: \"silver\", sortable: true, filter: true, editable: true },\r\n        { headerName: \"Bronze\", field: \"bronze\", sortable: true, filter: true, editable: true },\r\n        { headerName: \"Total\", field: \"total\", sortable: true, filter: true, editable: true }],\r\n    }\r\n  }\r\n\r\n  \r\n  componentDidMount() {\r\n    console.log(\"Mount Completed\")\r\n    fetch('https://raw.githubusercontent.com/ag-grid/ag-grid/master/grid-packages/ag-grid-docs/src/olympicWinners.json')\r\n    .then(result => result.json())\r\n    .then(rowData => this.setState({rowData}))\r\n    this.makeChart(options)\r\n  }\r\n\r\n  makeChart = function(options) {\r\n    new Highcharts.chart(options) \r\n  }\r\n  componentWillUnmount() {\r\n    console.log(\"Welcome\")\r\n  }\r\n\r\n  changeChart = function(event){\r\n    document.getElementById('chart_id').value = event.target.value\r\n    console.log(event.target.value)\r\n    options.chart.type = event.target.value\r\n    this.makeChart(options)\r\n  }\r\n\r\n  onSelectionChanged = () => {\r\n    const selectedNodes = this.gridApi.getSelectedNodes()\r\n    const selectedData = selectedNodes.map( node => node.data )\r\n    const selectedDataStringPresentation = selectedData.map( node => node.athlete + ' FROM ' + node.country).join(', ')\r\n    console.log(`Selected Name are : ${selectedDataStringPresentation}`)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <select onChange ={this.changeChart.bind(this)} id = \"chart_id\" >\r\n          <option value=\"line\">Line</option>\r\n          <option value=\"column\">Column</option>\r\n          <option value=\"bar\">Bar</option>\r\n          <option value=\"pie\">Pie</option>\r\n        </select>\r\n        <div style={ {width: '70%', margin: 'auto'} } id='chartContainer'>\r\n          {/* <HighchartsReact highcharts={Highcharts} options={options} /> */}\r\n        </div>\r\n        <div className=\"ag-theme-alpine-dark\" style={ {height: '600px', width: '1200px', margin: 'auto'} }>\r\n          <AgGridReact\r\n              rowSelection=\"multiple\"\r\n              onSelectionChanged={this.onSelectionChanged.bind(this)}\r\n              onGridReady={ params => this.gridApi = params.api }\r\n              columnDefs={this.state.columnDefs}\r\n              rowData={this.state.rowData}>\r\n          </AgGridReact>\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}